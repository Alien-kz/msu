[client] 192.168.0.3 <-------------------------router--------------------------> 192.168.0.2   [server]






[client] 192.168.0.108 <-------------------------router(home)--------------------------> 192.168.0.2   [server]
         browser:80                           /   |                              google:80
         zoom:5001                           /    |                              zoom:5001
         gmeet:5005                         /     V                              gmeet:5005
         jitsu:5007                        /    192.168.0.1  [server]            jitsu:5007
                                          /
                                   169.254.0.?
                                         ^
                                         |
WWW    ----->    188.247.192.59 <---- router(provider)

80 - http (browser)
8080 - http
587 	Alternative SMTP port
110 	POP
22 	SSH
143 	IMAP

ip address - абстракция сетевого адреса машины
port - абстракция ?? машины


---------------------------------------------

Бонус 1 (pull request Memory)
- неверное выделение памяти (socket_init)

Бонус 2 (pull request Client info)
- неверное определение адреса connected: 13.127.0.0 42885

---------------------------------------------

1. (Синхронный - блокирующий)
К серверу подключается несколько клиентов (количество клиентов - параметр сервера через аргумент командной строки 1-5)
Всё что присылают клиенты по очереди (1 2 3 1 2 3) печатаем на экран по 1 байту (буквы) в формате:
клиент: буква

клиент 1 отправил hello
клиент 2 отправил hi

сервер
1: h
2: h
1: e
2: i
1: l
- зависнет

идея:
for (i = 0; i < n; i++)
  socket[i] = accept()

while(1)
  for (i = 0; i < n; i++)
    if (read(socket[i], &ch, 1) <= 0)
      break;
    putchar(ch);

for (i = 0; i < n; i++)
  close(socket[i]);


2. (Асинхронный - неблокирующий)
К серверу подключается несколько клиентов (количество клиентов - параметр сервера через аргумент командной строки 1-5)
Всё что присылают клиенты печатаем на экран по 1 байту (буквы) в формате:
клиент: буква

клиент 1 отправил hello
клиент 2 отправил hi
клиент 1 отправил yes

сервер (кто раньше отправил тот раньше и распечатан)
1: h
1: e
1: l
1: l
1: o
2: h
2: i
1: y
1: e
1: s

чтобы было в перемешку:
1) sleep(0.3) sleep(0.5) в клиентах 
2) очень-очень текста

идея:
for (i = 0; i < n; i++)
  socket[i] = accept()

for (i = 0; i < n; i++){
  if (fork() == 0) {
     for (j = 0; j < n; j++)
       if (i != j)
         close(socket[j]);

     int ret = 1;
     do {
        ret = read(socket[i], &ch, 1);
        printf("%d:%c\n", i, ch);
        fflush(stdout);
     }while(ret > 0);
     close(socket[i]);
     _exit(0)
  }
  close(socket[i]);
}

  
  
  
          [server]
           /    \
stdout<-[son1] [son2]->stdout
          /       \
      [client1] [client2]  
  
3. К серверу подключается несколько клиентов (количество клиентов - параметр сервера через аргумент командной строки 1-5)
Всё что присылают клиенты печатаем на экран все байты до пробела или переноса строки в формате:
клиент: слово

клиент 1 отправил hello
клиент 1 отправил world
клиент 2 отправил hi
клиент 1 отправил abc def

сервер
1: hello
1: world
2: hi
1: abc
1: def

идея:
for (i = 0; i < n; i++)
  socket[i] = accept()

for (i = 0; i < n; i++)
  if (fork() == 0) {
     for (j = 0; j < n; j++)
       if (i != j)
         close(socket[j]);
    while(1) {
        char *message=...
        do {
            read(socket[i], &ch, 1)
            message = realloc(message ...)
        } while (ch != ' ' || ch != '\n');
        printf(message);
     }
      close(socket[i]);
     _exit(0)
  }
  close(socket[i])


4*. К серверу подключается несколько клиентов (количество клиентов - параметр сервера через аргумент командной строки 1-5)
Всё что присылают клиенты печатаем на экран остальных клиентов все байты до пробела в формате:

сервер
1: hello
1: world
2: hi

клиент 1
1: hello
1: world
2: hi

клиент 2
1: hello
1: world
2: hi


for (i = 0; i < n; i++)
  if (fork() == 0) {
     while(1) {
        char *message=...
        do {
            read(socket[i], &ch, 1)
            message = realloc(message ...)
        } while (ch != ' ');
        for (j = 0; j < n; j++)
            write(socket[j], message)
        printf(message);
     }
     for (j = 0; j < n; j++)
       close(socket[j]);
     _exit(1)
  }
  close(socket[i])

Асинхронный клиент - fork() (нужен дочерний процесс):
- читать с клавиатуры и отправлять на сервер
- читать с сервера и отправлять в терминал


github.com/user/client_server/home1
github.com/user/client_server/home2
github.com/user/client_server/home3
github.com/user/client_server/home4















